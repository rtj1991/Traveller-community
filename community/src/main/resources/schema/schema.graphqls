type Mutation {
    createLoginUser(userInfo: UserInput): Boolean
    login(email: String!, password: String!): String
    createTrip(tripInfo:TripInput):MyTrip
    createReview(id:ID,review:ReviewInput):Review
    editLoginUser(id:ID,userInfo: UserInput): User
    sendMessage(id:ID,inputMsg:MessageInfo):Message
}

type Query{
    getUser(id:ID): User
    getAllTrip: [MyTrip]
    followTraveller(followerInfo:FollowerInfo):Follower
    unFollowTraveller(followerInfo:FollowerInfo):Follower
    getTripandReviewById(id:ID):[Review]
    getAllUser:[User]
    serarchTrips(location:String,date:String,gender:Int):[MyTrip]
    upgradeUser(id:ID):Boolean
}

type User {
    user_id:Int
    name: String
    profile_pic: String
    dob: String
    gender: Int
    location: String
    email: String
}
type MyTrip{
    location: String
    description: String
    startDate: String
    endDate: String
    status: Int
}
type Follower{
    follower:User
    followedby:User
}
type Review{
    rating:String
    comment:String
}
type Message{
    message:String
    receiver:User
    sender:User
}

input UserInput{
    user_id: Int
    name: String
    profile_pic: String
    dob: String
    gender: Int
    location: String
    email: String
    password: String
}

input TripInput{
    id: ID
    location: String
    description: String
    startDate: String
    endDate: String
    status: Int
}

input ReviewInput{
    rating:String
    comment:String
}
input MessageInfo{
    id:ID
    message:String
    receiver:UserInput
}

input FollowerInfo{
    follower:UserInput
    followedby:UserInput
}